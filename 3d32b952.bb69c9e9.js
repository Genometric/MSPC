(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{73:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),i=(n(0),n(95)),o={title:"Parser Configuration"},l={unversionedId:"cli/parser",id:"cli/parser",isDocsHomePage:!1,title:"Parser Configuration",description:"MSPC uses GeUtilities",source:"@site/docs/cli/parser.md",slug:"/cli/parser",permalink:"/MSPC/docs/cli/parser",editUrl:"https://github.com/Genometric/MSPC/tree/dev/website/docs/cli/parser.md",version:"current",sidebar:"someSidebar",previous:{title:"Arguments",permalink:"/MSPC/docs/cli/args"},next:{title:"Install",permalink:"/MSPC/docs/library/install"}},c=[{value:"Column Order",id:"column-order",children:[]},{value:"p-Value Format",id:"p-value-format",children:[]},{value:"Peaks with Missing or Invalid p-Values",id:"peaks-with-missing-or-invalid-p-values",children:[]},{value:"Culture info",id:"culture-info",children:[]}],b={rightToc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"MSPC uses ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Genometric/GeUtilities"}),"GeUtilities"),"\nto parse BED files. Out of box, MSPC uses the default configuration\nof ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Genometric/GeUtilities"}),"GeUtilities"),"; accordingly,\nit expects an input BED file to be in format similar to the following\nexample:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"chr1    9999    10039   MACS_peak_1 2.42\nchr1    10101   10190   MACS_peak_2 3.23\nchr1    29303   29382   MACS_peak_3 2.44\nchr1    32600   32680   MACS_peak_4 4.08\nchr1    32726   32936   MACS_peak_5 17.5\nchr1    34689   34797   MACS_peak_6 5.82\nchr1    35083   35124   MACS_peak_7 4.59\n")),Object(i.b)("p",null,"The fifth column represents the p-value, and by default, MSPC expects\nit be in ",Object(i.b)("inlineCode",{parentName:"p"},"-Log10")," format (read ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#p-value-format"}),"how to adjust this configuration"),".\nAlso, by default, MSPC expects each peak\nto have a p-value; otherwise, that peak will not be parsed into MSPC."),Object(i.b)("p",null,"A BED file may have additional columns; however, the content of\nthose columns will not be parsed into MSPC."),Object(i.b)("p",null,"The ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Genometric/GeUtilities"}),"GeUtilities"),"\nparser is highly customizable that allows parsing BED files\nrepresented differently. The following JSON object contains\nall the configuration attributes, each discussed in details\nin the following sections."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n   "Chr":0,\n   "Left":1,\n   "Right":2,\n   "Name":3,\n   "Strand":4,\n   "Summit":5,\n   "Value":6,\n   "Culture":"en-US",\n   "PValueFormat":1,\n   "DefaultValue":0.0001,\n   "DropPeakIfInvalidValue":true\n}\n')),Object(i.b)("h2",{id:"column-order"},"Column Order"),Object(i.b)("p",null,"A BED file is a plain-text and tab-delimited file, it has multiple\ncolumns, and the type of data in each column follows widely adopted\nstandards with a number of variations. In order to correctly parse\ndifferent formats of BED files (standard or non-standard), without\nrequiring the users to convert them to a common format, MSPC allows\nusers to configure its parser by specifying the number of columns\nthat contain required information."),Object(i.b)("p",null,"To specify column order, create a plain text file with the\nfollowing content: "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{  \n   "Chr":0,\n   "Left":1,\n   "Right":2,\n   "Strand":4,\n   "Name":3,\n   "Value":4,\n   "Summit":5\n}\n')),Object(i.b)("p",null,"Change the values of each configuration key according\nto your BED file. Then save this file with any name\n(e.g., ",Object(i.b)("inlineCode",{parentName:"p"},"myConfig.json"),"), and give its path to MSPC\nusing ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/MSPC/docs/cli/args#input-parser-configuration"}),Object(i.b)("inlineCode",{parentName:"a"},"--parser")," argument"),"."),Object(i.b)("h2",{id:"p-value-format"},"p-Value Format"),Object(i.b)("p",null,"By default, MSPC expects p-values in a BED file to\nrepresented in ",Object(i.b)("inlineCode",{parentName:"p"},"-log10(p-value)")," format. However,\nsome tools produce p-values in ",Object(i.b)("inlineCode",{parentName:"p"},"-10log10(p-value)"),",\n",Object(i.b)("inlineCode",{parentName:"p"},"-100log10(p-value)"),", or actual p-value (without\n",Object(i.b)("inlineCode",{parentName:"p"},"log10")," scale). To set MSPC to correctly\nparse peaks according to their p-values representation,\nuse the ",Object(i.b)("inlineCode",{parentName:"p"},'"PValueFormat"')," attribute in\nthe parser configuration JSON object according to\nthe following table:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Format"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"JSON attribute"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Example p-value from BED file"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Parsed p-value"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Same as input"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},'"PValueFormat":0')),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"0.001")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"0.001"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"-log10(p-value)")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},'"PValueFormat":1')),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"3")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"0.001"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"-10log10(p-value)")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},'"PValueFormat":2')),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"30")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"0.001"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"-100log10(p-value)")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},'"PValueFormat":3')),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"300")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"0.001"))))),Object(i.b)("p",null,"(See ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Parsers/Bed/Enums.cs#L7%5D"}),"p-value formats"),"\nof GeUtilities.)"),Object(i.b)("h2",{id:"peaks-with-missing-or-invalid-p-values"},"Peaks with Missing or Invalid p-Values"),Object(i.b)("p",null,"Some BED files may not a valid p-value for some\nor none of the peaks in that file; for instance,\nBED files generated per cell in single-cell\nassays do not commonly provide a p-value\nper peak. Hence, following cases are possible:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"missing p-value for some peaks:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"chr1    9999    10039   MACS_peak_1 2.42\nchr1    10101   10190   MACS_peak_2 3.23\nchr1    29303   29382   MACS_peak_3\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"none of the peaks have a p-value (commonly in\nsingle-cell assays):"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"```\nchr1    9999    10039\nchr1    10101   10190\nchr1    29303   29382\n```\n")))),Object(i.b)("p",null,"By default, MSPC drops all the peaks that\ndo not have a valid p-value. To set MSPC\nto read such peaks, use the following\nattribute in parser configuration JSON\nobject: "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'"DropPeakIfInvalidValue":false\n')),Object(i.b)("p",null,"With this configuration, MSPC sets the p-value\nof peaks with invalid/missing p-value to ",Object(i.b)("inlineCode",{parentName:"p"},"1E-8"),"\n(see ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Parsers/Bed/BedParserGeneric.cs#L89"}),"this initialization"),").\nTo change the default p-value, use the following\nattribute in parser configuration JSON\nobject: "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'"DefaultValue":0.0001\n')),Object(i.b)("p",null,"Hence, to read the previous example,\nset the parser configuration JSON object as\nthe following:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n   "Chr":0,\n   "Left":1,\n   "Right":2,\n   "DefaultValue":0.0001,\n   "DropPeakIfInvalidValue":true\n}\n')),Object(i.b)("h2",{id:"culture-info"},"Culture info"),Object(i.b)("p",null,"Numbers can be formatted differently depending on the operating\nsystem's culture (or locale) settings. For instance, different\ncultures use ",Object(i.b)("em",{parentName:"p"},"dot")," (",Object(i.b)("inlineCode",{parentName:"p"},"."),"), ",Object(i.b)("em",{parentName:"p"},"comma")," (",Object(i.b)("inlineCode",{parentName:"p"},","),"), or ",Object(i.b)("em",{parentName:"p"},"forward slash"),"\n(",Object(i.b)("inlineCode",{parentName:"p"},"/"),") characters as decimal separators. Accordingly, the following\nnumbers formatted following different cultures are equal:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"- 1.234\n- 1,234\n- 1/234\n")),Object(i.b)("p",null,"MSPC parses numbers according to the culture setting of the\nexecution environment. For instance, on a operating system\nwith its ",Object(i.b)("em",{parentName:"p"},"region")," set to US, MSPC considers ",Object(i.b)("em",{parentName:"p"},"dot")," (",Object(i.b)("inlineCode",{parentName:"p"},"."),") as\na decimal separator."),Object(i.b)("p",null,"In some scenarios input data format may not adhere with the\nculture setting of the operating system. For instance, a scientist\nin Europe (where a ",Object(i.b)("em",{parentName:"p"},"comma")," character (",Object(i.b)("inlineCode",{parentName:"p"},","),") is used as decimal separator)\nanalyzing data generated by a collaborator from US (where a ",Object(i.b)("em",{parentName:"p"},"dot"),"\ncharacter('.') is used as decimal separator). For such scenarios\nyou may explicitly specify the culture info of the input data\nusing the ",Object(i.b)("inlineCode",{parentName:"p"},"Culture")," attribute in parser configuration json file.\nFor instance, the following configuration sets MSPC to read\nnumbers formatted in US style independent from culture setting\nof the operating system: "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n   "Chr":0,\n   "Left":1,\n   "Right":2,\n   "Name":3,\n   "Value":4,\n   "Culture":"en-US"\n}\n')),Object(i.b)("p",null,"You may refer to ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Genometric/GeUtilities/wiki/Currently-supported-culture"}),"this page"),"\nfor a complete list of currently supported cultures."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Note that the numbers written to the output files generated by MSPC are\nformatted according to the operating system's settings, independent\nfrom the culture setting provided for the input parser.")))}p.isMDXComponent=!0},95:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),p=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),s=p(n),m=a,d=s["".concat(o,".").concat(m)]||s[m]||u[m]||i;return n?r.a.createElement(d,l(l({ref:t},b),{},{components:n})):r.a.createElement(d,l({ref:t},b))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var b=2;b<i;b++)o[b]=n[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);