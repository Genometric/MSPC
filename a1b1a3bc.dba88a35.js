(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{86:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(7),i=(n(0),n(96)),c={title:"Basic Invocation"},o={unversionedId:"library/basic_invocation",id:"library/basic_invocation",isDocsHomePage:!1,title:"Basic Invocation",description:"In general, a basic invocation on MSPC Core consists of three steps:",source:"@site/docs/library/basic_invocation.md",slug:"/library/basic_invocation",permalink:"/MSPC/docs/library/basic_invocation",editUrl:"https://github.com/Genometric/MSPC/tree/dev/website/docs/library/basic_invocation.md",version:"current",sidebar:"someSidebar",previous:{title:"Install",permalink:"/MSPC/docs/library/install"},next:{title:"(A)synchronous execution",permalink:"/MSPC/docs/library/asynch_exe"}},s=[{value:"Remarks",id:"remarks",children:[]}],l={rightToc:s};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In general, a basic invocation on MSPC ",Object(i.b)("inlineCode",{parentName:"p"},"Core")," consists of three steps: "),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Parse input samples;"),Object(i.b)("li",{parentName:"ol"},"Setup a ",Object(i.b)("inlineCode",{parentName:"li"},"Config")," object, specifying basic analysis parameters;"),Object(i.b)("li",{parentName:"ol"},"Initialize an instance of ",Object(i.b)("inlineCode",{parentName:"li"},"Mspc")," class, add all input samples, and call ",Object(i.b)("inlineCode",{parentName:"li"},"Run")," function.")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp"}),"// First;\n// parse input samples using Genometric.GeUtilities\n// available on NuGet:  https://www.nuget.org/packages/Genometric.GeUtilities/\n// you may use a code similar to the following:\nvar bedParser = new BedParser();\nvar sample = bedParser.Parse(fileName);\n\n// Second;\n// Configure options\nvar config = new Config(\n    c: 2,\n    tauW: 1E-4,\n    tauS: 1E-8,\n    gamma: 1E-8,\n    alpha: 0.05F,\n    replicateType: ReplicateType.Biological,\n    multipleIntersections: MultipleIntersections.UseLowestPValue);\n\n//\n// Third;\n// Initialize and call MSPC Core; you may use \n// a code similar to the following:\nvar mspc = new Mspc();\nmspc.AddSample(sample.FileHashKey, sample);\nvar results = mspc.Run(config);\n")),Object(i.b)("h2",{id:"remarks"},"Remarks"),Object(i.b)("p",null,"The afore-mentioned example uses ",Object(i.b)("strong",{parentName:"p"},"conceret")," versions of the\n",Object(i.b)("inlineCode",{parentName:"p"},"BedParser")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Mspc")," class:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Parsers/Bed/BedParser.cs#L10-L17"}),Object(i.b)("inlineCode",{parentName:"a"},"BedParser")),"\nparses each peak in the given input sample file as a\n",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Model/Peak.cs#L9-L54"}),Object(i.b)("inlineCode",{parentName:"a"},"Peak")),"\nobject, and returns a ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Parsers/Model/Bed.cs#L9-L15"}),Object(i.b)("inlineCode",{parentName:"a"},"Bed")),"\nobject representing the sample file;"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/Genometric/MSPC/blob/be51df1fa2f37a0ded44cc8b5769864fd8c75bc9/Core/Mspc.cs#L9-L13"}),Object(i.b)("inlineCode",{parentName:"a"},"Mspc")),"\nprocesses ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Model/Peak.cs#L9-L54"}),Object(i.b)("inlineCode",{parentName:"a"},"Peak")),"\nobjects in a ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Parsers/Model/Bed.cs#L9-L15"}),Object(i.b)("inlineCode",{parentName:"a"},"Bed"))," object per sample,\nand returns analysis results in as ",Object(i.b)("inlineCode",{parentName:"li"},"ReadOnlyDictionary<uint,"),Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/Genometric/MSPC/blob/be51df1fa2f37a0ded44cc8b5769864fd8c75bc9/Core/Model/Result.cs#L10-L26"}),Object(i.b)("inlineCode",{parentName:"a"},"Result")),Object(i.b)("inlineCode",{parentName:"li"},"<Peak>>"),".")),Object(i.b)("p",null,"This design is to facilitate using MSPC for developers, since\nthey do not need to define/implement mspc-specific models and\ncan benefit from simpler function invocations."),Object(i.b)("p",null,"However, each of these classes implement ",Object(i.b)("strong",{parentName:"p"},"generic")," versions\nthat allow developers to define their own types, which makes\nit simpler to integrate MSPC into their application. For instance,\nif your peaks are represented in a different type (you use a different\nclass for your peaks), you can still use MSPC to analyze your peaks\nwithout having to convert them to a different type, if your objects\nimplement the same interface as MSPC requires."))}b.isMDXComponent=!0},96:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),b=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=b(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=b(n),u=a,d=p["".concat(c,".").concat(u)]||p[u]||m[u]||i;return n?r.a.createElement(d,o(o({ref:t},l),{},{components:n})):r.a.createElement(d,o({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,c=new Array(i);c[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var l=2;l<i;l++)c[l]=n[l];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);