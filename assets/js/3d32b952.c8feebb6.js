"use strict";(self.webpackChunkmspc=self.webpackChunkmspc||[]).push([[379],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>d});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),g=s(n),m=r,d=g["".concat(p,".").concat(m)]||g[m]||c[m]||i;return n?a.createElement(d,l(l({ref:t},u),{},{components:n})):a.createElement(d,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[g]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2232:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(8168),r=(n(6540),n(5680));const i={title:"Parser Configuration"},l=void 0,o={unversionedId:"cli/parser",id:"cli/parser",title:"Parser Configuration",description:"MSPC uses GeUtilities",source:"@site/docs/cli/parser.md",sourceDirName:"cli",slug:"/cli/parser",permalink:"/MSPC/docs/cli/parser",draft:!1,editUrl:"https://github.com/Genometric/MSPC/tree/dev/website/docs/cli/parser.md",tags:[],version:"current",frontMatter:{title:"Parser Configuration"},sidebar:"someSidebar",previous:{title:"Arguments",permalink:"/MSPC/docs/cli/args"},next:{title:"Performance",permalink:"/MSPC/docs/cli/benchmarking"}},p={},s=[{value:"Column Order",id:"column-order",level:2},{value:"p-Value Format",id:"p-value-format",level:2},{value:"Peaks with Missing or Invalid p-Values",id:"peaks-with-missing-or-invalid-p-values",level:2},{value:"Culture info",id:"culture-info",level:2}],u={toc:s},g="wrapper";function c(e){let{components:t,...n}=e;return(0,r.yg)(g,(0,a.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"MSPC uses ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/Genometric/GeUtilities"},"GeUtilities"),"\nto parse BED files. Out of box, MSPC uses the default configuration\nof ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/Genometric/GeUtilities"},"GeUtilities"),"; accordingly,\nit expects an input BED file to be in format similar to the following\nexample:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"chr1    9999    10039   MACS_peak_1 2.42\nchr1    10101   10190   MACS_peak_2 3.23\nchr1    29303   29382   MACS_peak_3 2.44\nchr1    32600   32680   MACS_peak_4 4.08\nchr1    32726   32936   MACS_peak_5 17.5\nchr1    34689   34797   MACS_peak_6 5.82\nchr1    35083   35124   MACS_peak_7 4.59\n")),(0,r.yg)("p",null,"The fifth column represents the p-value, and by default, MSPC expects\nit be in ",(0,r.yg)("inlineCode",{parentName:"p"},"-Log10")," format (read ",(0,r.yg)("a",{parentName:"p",href:"#p-value-format"},"how to adjust this configuration"),").\nAlso, by default, MSPC expects each peak\nto have a p-value; otherwise, that peak will not be parsed into MSPC."),(0,r.yg)("p",null,"A BED file may have additional columns; however, the content of\nthose columns will not be parsed into MSPC."),(0,r.yg)("p",null,"The ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/Genometric/GeUtilities"},"GeUtilities"),"\nparser is highly customizable that allows parsing BED files\nrepresented differently. The following JSON object contains\nall the configuration attributes, each discussed in details\nin the following sections."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n   "Chr":0,\n   "Left":1,\n   "Right":2,\n   "Name":3,\n   "Value":4,\n   "Strand":-1,\n   "Summit":-1,\n   "Culture":"en-US",\n   "PValueFormat":1,\n   "DefaultValue":0.0001,\n   "DropPeakIfInvalidValue":true\n}\n')),(0,r.yg)("h2",{id:"column-order"},"Column Order"),(0,r.yg)("p",null,"A BED file is a plain-text and tab-delimited file, it has multiple\ncolumns, and the type of data in each column follows widely adopted\nstandards with a number of variations. In order to correctly parse\ndifferent formats of BED files (standard or non-standard), without\nrequiring the users to convert them to a common format, MSPC allows\nusers to configure its parser by specifying the number of columns\nthat contain required information."),(0,r.yg)("p",null,"For instance, if your samples are stranded, you may\nconfigure the parser as the following. "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"chr1    633859  634162  peak_1  137 .\nchr1    1079427 1079669 peak_2  67  .\nchr1    1109848 1110187 peak_3  91  .\n")),(0,r.yg)("p",null,"Create a JSON file as the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{"Strand": 5}\n')),(0,r.yg)("p",null,"and execute MSPC as the following passing the\n",(0,r.yg)("a",{parentName:"p",href:"args#input-parser-configuration"},"parser configuration")," :"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"mspc.exe -i inputs*.bed -r bio -w 1e-4 -s 1e-8 -p parser_config.json\n")),(0,r.yg)("p",null,"where ",(0,r.yg)("inlineCode",{parentName:"p"},"parser_config.json")," is the filename of the file\ncontaining the JSON object you created above."),(0,r.yg)("h2",{id:"p-value-format"},"p-Value Format"),(0,r.yg)("p",null,"By default, MSPC expects p-values in a BED file to\nrepresented in ",(0,r.yg)("inlineCode",{parentName:"p"},"-log10(p-value)")," format. However,\nsome tools produce p-values in ",(0,r.yg)("inlineCode",{parentName:"p"},"-10log10(p-value)"),",\n",(0,r.yg)("inlineCode",{parentName:"p"},"-100log10(p-value)"),", or actual p-value (without\n",(0,r.yg)("inlineCode",{parentName:"p"},"log10")," scale). To set MSPC to correctly\nparse peaks according to their p-values representation,\nuse the ",(0,r.yg)("inlineCode",{parentName:"p"},'"PValueFormat"')," attribute in\nthe parser configuration JSON object according to\nthe following table:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Format"),(0,r.yg)("th",{parentName:"tr",align:"left"},"JSON attribute"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Example p-value from BED file"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Parsed p-value"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},"Same as input"),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},'"PValueFormat":0')),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"0.001")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"0.001"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"-log10(p-value)")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},'"PValueFormat":1')),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"3")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"0.001"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"-10log10(p-value)")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},'"PValueFormat":2')),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"30")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"0.001"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"-100log10(p-value)")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},'"PValueFormat":3')),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"300")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"0.001"))))),(0,r.yg)("p",null,"(See ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Parsers/Bed/Enums.cs#L7%5D"},"p-value formats"),"\nof GeUtilities.)"),(0,r.yg)("h2",{id:"peaks-with-missing-or-invalid-p-values"},"Peaks with Missing or Invalid p-Values"),(0,r.yg)("p",null,"Some BED files may not a valid p-value for some\nor none of the peaks in that file; for instance,\nBED files generated per cell in single-cell\nassays do not commonly provide a p-value\nper peak. Hence, following cases are possible:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"missing p-value for some peaks:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre"},"chr1    9999    10039   MACS_peak_1 2.42\nchr1    10101   10190   MACS_peak_2 3.23\nchr1    29303   29382   MACS_peak_3\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"none of the peaks have a p-value (commonly in\nsingle-cell assays):"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre"},"```\nchr1    9999    10039\nchr1    10101   10190\nchr1    29303   29382\n```\n")))),(0,r.yg)("p",null,"By default, MSPC drops all the peaks that\ndo not have a valid p-value. To set MSPC\nto read such peaks, use the following\nattribute in parser configuration JSON\nobject: "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'"DropPeakIfInvalidValue":false\n')),(0,r.yg)("p",null,"With this configuration, MSPC sets the p-value\nof peaks with invalid/missing p-value to ",(0,r.yg)("inlineCode",{parentName:"p"},"1E-8"),"\n(see ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Parsers/Bed/BedParserGeneric.cs#L89"},"this initialization"),").\nTo change the default p-value, use the following\nattribute in parser configuration JSON\nobject: "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'"DefaultValue":0.0001\n')),(0,r.yg)("p",null,"Hence, to read the previous example,\nset the parser configuration JSON object as\nthe following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n   "Chr":0,\n   "Left":1,\n   "Right":2,\n   "DefaultValue":0.0001,\n   "DropPeakIfInvalidValue":true\n}\n')),(0,r.yg)("h2",{id:"culture-info"},"Culture info"),(0,r.yg)("p",null,"Numbers can be formatted differently depending on the operating\nsystem's culture (or locale) settings. For instance, different\ncultures use ",(0,r.yg)("em",{parentName:"p"},"dot")," (",(0,r.yg)("inlineCode",{parentName:"p"},"."),"), ",(0,r.yg)("em",{parentName:"p"},"comma")," (",(0,r.yg)("inlineCode",{parentName:"p"},","),"), or ",(0,r.yg)("em",{parentName:"p"},"forward slash"),"\n(",(0,r.yg)("inlineCode",{parentName:"p"},"/"),") characters as decimal separators. Accordingly, the following\nnumbers formatted following different cultures are equal:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"- 1.234\n- 1,234\n- 1/234\n")),(0,r.yg)("p",null,"MSPC parses numbers according to the culture setting of the\nexecution environment. For instance, on a operating system\nwith its ",(0,r.yg)("em",{parentName:"p"},"region")," set to US, MSPC considers ",(0,r.yg)("em",{parentName:"p"},"dot")," (",(0,r.yg)("inlineCode",{parentName:"p"},"."),") as\na decimal separator."),(0,r.yg)("p",null,"In some scenarios input data format may not adhere with the\nculture setting of the operating system. For instance, a scientist\nin Europe (where a ",(0,r.yg)("em",{parentName:"p"},"comma")," character (",(0,r.yg)("inlineCode",{parentName:"p"},","),") is used as decimal separator)\nanalyzing data generated by a collaborator from US (where a ",(0,r.yg)("em",{parentName:"p"},"dot"),"\ncharacter('.') is used as decimal separator). For such scenarios\nyou may explicitly specify the culture info of the input data\nusing the ",(0,r.yg)("inlineCode",{parentName:"p"},"Culture")," attribute in parser configuration json file.\nFor instance, the following configuration sets MSPC to read\nnumbers formatted in US style independent from culture setting\nof the operating system: "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n   "Chr":0,\n   "Left":1,\n   "Right":2,\n   "Name":3,\n   "Value":4,\n   "Culture":"en-US"\n}\n')),(0,r.yg)("p",null,"You may refer to the ",(0,r.yg)("inlineCode",{parentName:"p"},"Language tag")," column in the list of language and region\nnames supported by Windows available in\n",(0,r.yg)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c"},"this page"),"."),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"The numbers written to the output files generated by MSPC are\nformatted according to the operating system's settings, independent\nfrom the culture setting provided for the input parser.")))}c.isMDXComponent=!0}}]);