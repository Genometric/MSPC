"use strict";(self.webpackChunkmspc=self.webpackChunkmspc||[]).push([[31],{3692:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"library/basic_invocation","title":"Basic Invocation","description":"In general, a basic invocation on MSPC Core consists of three steps:","source":"@site/docs/library/basic_invocation.md","sourceDirName":"library","slug":"/library/basic_invocation","permalink":"/MSPC/docs/library/basic_invocation","draft":false,"unlisted":false,"editUrl":"https://github.com/Genometric/MSPC/tree/dev/website/docs/library/basic_invocation.md","tags":[],"version":"current","frontMatter":{"title":"Basic Invocation"},"sidebar":"someSidebar","previous":{"title":"Install","permalink":"/MSPC/docs/library/install"},"next":{"title":"(A)synchronous execution","permalink":"/MSPC/docs/library/asynch_exe"}}');var t=s(4848),c=s(8453);const r={title:"Basic Invocation"},a=void 0,o={},l=[{value:"Remarks",id:"remarks",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["In general, a basic invocation on MSPC ",(0,t.jsx)(n.code,{children:"Core"})," consists of three steps:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Parse input samples;"}),"\n",(0,t.jsxs)(n.li,{children:["Setup a ",(0,t.jsx)(n.code,{children:"Config"})," object, specifying basic analysis parameters;"]}),"\n",(0,t.jsxs)(n.li,{children:["Initialize an instance of ",(0,t.jsx)(n.code,{children:"Mspc"})," class, add all input samples, and call ",(0,t.jsx)(n.code,{children:"Run"})," function."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// First;\n// parse input samples using Genometric.GeUtilities\n// available on NuGet:  https://www.nuget.org/packages/Genometric.GeUtilities/\n// you may use a code similar to the following:\nvar bedParser = new BedParser();\nvar sample = bedParser.Parse(fileName);\n\n// Second;\n// Configure options\nvar config = new Config(\n    c: 2,\n    tauW: 1E-4,\n    tauS: 1E-8,\n    gamma: 1E-8,\n    alpha: 0.05F,\n    replicateType: ReplicateType.Biological,\n    multipleIntersections: MultipleIntersections.UseLowestPValue);\n\n//\n// Third;\n// Initialize and call MSPC Core; you may use \n// a code similar to the following:\nvar mspc = new Mspc();\nmspc.AddSample(sample.FileHashKey, sample);\nvar results = mspc.Run(config);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"remarks",children:"Remarks"}),"\n",(0,t.jsxs)(n.p,{children:["The afore-mentioned example uses ",(0,t.jsx)(n.strong,{children:"conceret"})," versions of the\n",(0,t.jsx)(n.code,{children:"BedParser"})," and ",(0,t.jsx)(n.code,{children:"Mspc"})," class:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Parsers/Bed/BedParser.cs#L10-L17",children:(0,t.jsx)(n.code,{children:"BedParser"})}),"\nparses each peak in the given input sample file as a\n",(0,t.jsx)(n.a,{href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Model/Peak.cs#L9-L54",children:(0,t.jsx)(n.code,{children:"Peak"})}),"\nobject, and returns a ",(0,t.jsx)(n.a,{href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Parsers/Model/Bed.cs#L9-L15",children:(0,t.jsx)(n.code,{children:"Bed"})}),"\nobject representing the sample file;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/Genometric/MSPC/blob/be51df1fa2f37a0ded44cc8b5769864fd8c75bc9/Core/Mspc.cs#L9-L13",children:(0,t.jsx)(n.code,{children:"Mspc"})}),"\nprocesses ",(0,t.jsx)(n.a,{href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Model/Peak.cs#L9-L54",children:(0,t.jsx)(n.code,{children:"Peak"})}),"\nobjects in a ",(0,t.jsx)(n.a,{href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Parsers/Model/Bed.cs#L9-L15",children:(0,t.jsx)(n.code,{children:"Bed"})})," object per sample,\nand returns analysis results in as ",(0,t.jsx)(n.code,{children:"ReadOnlyDictionary<uint,"}),(0,t.jsx)(n.a,{href:"https://github.com/Genometric/MSPC/blob/be51df1fa2f37a0ded44cc8b5769864fd8c75bc9/Core/Model/Result.cs#L10-L26",children:(0,t.jsx)(n.code,{children:"Result"})}),(0,t.jsx)(n.code,{children:"<Peak>>"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This design is to facilitate using MSPC for developers, since\nthey do not need to define/implement mspc-specific models and\ncan benefit from simpler function invocations."}),"\n",(0,t.jsxs)(n.p,{children:["However, each of these classes implement ",(0,t.jsx)(n.strong,{children:"generic"})," versions\nthat allow developers to define their own types, which makes\nit simpler to integrate MSPC into their application. For instance,\nif your peaks are represented in a different type (you use a different\nclass for your peaks), you can still use MSPC to analyze your peaks\nwithout having to convert them to a different type, if your objects\nimplement the same interface as MSPC requires."]})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var i=s(6540);const t={},c=i.createContext(t);function r(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);