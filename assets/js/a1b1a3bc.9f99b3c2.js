"use strict";(self.webpackChunkmspc=self.webpackChunkmspc||[]).push([[916],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7312:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return m}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={title:"Basic Invocation"},l={unversionedId:"library/basic_invocation",id:"library/basic_invocation",isDocsHomePage:!1,title:"Basic Invocation",description:"In general, a basic invocation on MSPC Core consists of three steps:",source:"@site/docs/library/basic_invocation.md",sourceDirName:"library",slug:"/library/basic_invocation",permalink:"/MSPC/docs/library/basic_invocation",editUrl:"https://github.com/Genometric/MSPC/tree/dev/website/docs/library/basic_invocation.md",version:"current",frontMatter:{title:"Basic Invocation"},sidebar:"someSidebar",previous:{title:"Install",permalink:"/MSPC/docs/library/install"},next:{title:"(A)synchronous execution",permalink:"/MSPC/docs/library/asynch_exe"}},c=[{value:"Remarks",id:"remarks",children:[]}],p={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In general, a basic invocation on MSPC ",(0,i.kt)("inlineCode",{parentName:"p"},"Core")," consists of three steps: "),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Parse input samples;"),(0,i.kt)("li",{parentName:"ol"},"Setup a ",(0,i.kt)("inlineCode",{parentName:"li"},"Config")," object, specifying basic analysis parameters;"),(0,i.kt)("li",{parentName:"ol"},"Initialize an instance of ",(0,i.kt)("inlineCode",{parentName:"li"},"Mspc")," class, add all input samples, and call ",(0,i.kt)("inlineCode",{parentName:"li"},"Run")," function.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// First;\n// parse input samples using Genometric.GeUtilities\n// available on NuGet:  https://www.nuget.org/packages/Genometric.GeUtilities/\n// you may use a code similar to the following:\nvar bedParser = new BedParser();\nvar sample = bedParser.Parse(fileName);\n\n// Second;\n// Configure options\nvar config = new Config(\n    c: 2,\n    tauW: 1E-4,\n    tauS: 1E-8,\n    gamma: 1E-8,\n    alpha: 0.05F,\n    replicateType: ReplicateType.Biological,\n    multipleIntersections: MultipleIntersections.UseLowestPValue);\n\n//\n// Third;\n// Initialize and call MSPC Core; you may use \n// a code similar to the following:\nvar mspc = new Mspc();\nmspc.AddSample(sample.FileHashKey, sample);\nvar results = mspc.Run(config);\n")),(0,i.kt)("h2",{id:"remarks"},"Remarks"),(0,i.kt)("p",null,"The afore-mentioned example uses ",(0,i.kt)("strong",{parentName:"p"},"conceret")," versions of the\n",(0,i.kt)("inlineCode",{parentName:"p"},"BedParser")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Mspc")," class:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Parsers/Bed/BedParser.cs#L10-L17"},(0,i.kt)("inlineCode",{parentName:"a"},"BedParser")),"\nparses each peak in the given input sample file as a\n",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Model/Peak.cs#L9-L54"},(0,i.kt)("inlineCode",{parentName:"a"},"Peak")),"\nobject, and returns a ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Parsers/Model/Bed.cs#L9-L15"},(0,i.kt)("inlineCode",{parentName:"a"},"Bed")),"\nobject representing the sample file;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Genometric/MSPC/blob/be51df1fa2f37a0ded44cc8b5769864fd8c75bc9/Core/Mspc.cs#L9-L13"},(0,i.kt)("inlineCode",{parentName:"a"},"Mspc")),"\nprocesses ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Model/Peak.cs#L9-L54"},(0,i.kt)("inlineCode",{parentName:"a"},"Peak")),"\nobjects in a ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Parsers/Model/Bed.cs#L9-L15"},(0,i.kt)("inlineCode",{parentName:"a"},"Bed"))," object per sample,\nand returns analysis results in as ",(0,i.kt)("inlineCode",{parentName:"li"},"ReadOnlyDictionary<uint,"),(0,i.kt)("a",{parentName:"li",href:"https://github.com/Genometric/MSPC/blob/be51df1fa2f37a0ded44cc8b5769864fd8c75bc9/Core/Model/Result.cs#L10-L26"},(0,i.kt)("inlineCode",{parentName:"a"},"Result")),(0,i.kt)("inlineCode",{parentName:"li"},"<Peak>>"),".")),(0,i.kt)("p",null,"This design is to facilitate using MSPC for developers, since\nthey do not need to define/implement mspc-specific models and\ncan benefit from simpler function invocations."),(0,i.kt)("p",null,"However, each of these classes implement ",(0,i.kt)("strong",{parentName:"p"},"generic")," versions\nthat allow developers to define their own types, which makes\nit simpler to integrate MSPC into their application. For instance,\nif your peaks are represented in a different type (you use a different\nclass for your peaks), you can still use MSPC to analyze your peaks\nwithout having to convert them to a different type, if your objects\nimplement the same interface as MSPC requires."))}m.isMDXComponent=!0}}]);