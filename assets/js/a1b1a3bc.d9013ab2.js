"use strict";(self.webpackChunkmspc=self.webpackChunkmspc||[]).push([[31],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>y});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),u=r,y=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return t?a.createElement(y,o(o({ref:n},p),{},{components:t})):a.createElement(y,o({ref:n},p))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4517:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(8168),r=(t(6540),t(5680));const i={title:"Basic Invocation"},o=void 0,s={unversionedId:"library/basic_invocation",id:"library/basic_invocation",title:"Basic Invocation",description:"In general, a basic invocation on MSPC Core consists of three steps:",source:"@site/docs/library/basic_invocation.md",sourceDirName:"library",slug:"/library/basic_invocation",permalink:"/MSPC/docs/library/basic_invocation",draft:!1,editUrl:"https://github.com/Genometric/MSPC/tree/dev/website/docs/library/basic_invocation.md",tags:[],version:"current",frontMatter:{title:"Basic Invocation"},sidebar:"someSidebar",previous:{title:"Install",permalink:"/MSPC/docs/library/install"},next:{title:"(A)synchronous execution",permalink:"/MSPC/docs/library/asynch_exe"}},l={},c=[{value:"Remarks",id:"remarks",level:2}],p={toc:c},m="wrapper";function d(e){let{components:n,...t}=e;return(0,r.yg)(m,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"In general, a basic invocation on MSPC ",(0,r.yg)("inlineCode",{parentName:"p"},"Core")," consists of three steps: "),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Parse input samples;"),(0,r.yg)("li",{parentName:"ol"},"Setup a ",(0,r.yg)("inlineCode",{parentName:"li"},"Config")," object, specifying basic analysis parameters;"),(0,r.yg)("li",{parentName:"ol"},"Initialize an instance of ",(0,r.yg)("inlineCode",{parentName:"li"},"Mspc")," class, add all input samples, and call ",(0,r.yg)("inlineCode",{parentName:"li"},"Run")," function.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},"// First;\n// parse input samples using Genometric.GeUtilities\n// available on NuGet:  https://www.nuget.org/packages/Genometric.GeUtilities/\n// you may use a code similar to the following:\nvar bedParser = new BedParser();\nvar sample = bedParser.Parse(fileName);\n\n// Second;\n// Configure options\nvar config = new Config(\n    c: 2,\n    tauW: 1E-4,\n    tauS: 1E-8,\n    gamma: 1E-8,\n    alpha: 0.05F,\n    replicateType: ReplicateType.Biological,\n    multipleIntersections: MultipleIntersections.UseLowestPValue);\n\n//\n// Third;\n// Initialize and call MSPC Core; you may use \n// a code similar to the following:\nvar mspc = new Mspc();\nmspc.AddSample(sample.FileHashKey, sample);\nvar results = mspc.Run(config);\n")),(0,r.yg)("h2",{id:"remarks"},"Remarks"),(0,r.yg)("p",null,"The afore-mentioned example uses ",(0,r.yg)("strong",{parentName:"p"},"conceret")," versions of the\n",(0,r.yg)("inlineCode",{parentName:"p"},"BedParser")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"Mspc")," class:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Parsers/Bed/BedParser.cs#L10-L17"},(0,r.yg)("inlineCode",{parentName:"a"},"BedParser")),"\nparses each peak in the given input sample file as a\n",(0,r.yg)("a",{parentName:"li",href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Model/Peak.cs#L9-L54"},(0,r.yg)("inlineCode",{parentName:"a"},"Peak")),"\nobject, and returns a ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Parsers/Model/Bed.cs#L9-L15"},(0,r.yg)("inlineCode",{parentName:"a"},"Bed")),"\nobject representing the sample file;"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/Genometric/MSPC/blob/be51df1fa2f37a0ded44cc8b5769864fd8c75bc9/Core/Mspc.cs#L9-L13"},(0,r.yg)("inlineCode",{parentName:"a"},"Mspc")),"\nprocesses ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Model/Peak.cs#L9-L54"},(0,r.yg)("inlineCode",{parentName:"a"},"Peak")),"\nobjects in a ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/Genometric/GeUtilities/blob/30bb4691fc2ad37eda6131c6e3f3714c5464dbb4/GeUtilities/Intervals/Parsers/Model/Bed.cs#L9-L15"},(0,r.yg)("inlineCode",{parentName:"a"},"Bed"))," object per sample,\nand returns analysis results in as ",(0,r.yg)("inlineCode",{parentName:"li"},"ReadOnlyDictionary<uint,"),(0,r.yg)("a",{parentName:"li",href:"https://github.com/Genometric/MSPC/blob/be51df1fa2f37a0ded44cc8b5769864fd8c75bc9/Core/Model/Result.cs#L10-L26"},(0,r.yg)("inlineCode",{parentName:"a"},"Result")),(0,r.yg)("inlineCode",{parentName:"li"},"<Peak>>"),".")),(0,r.yg)("p",null,"This design is to facilitate using MSPC for developers, since\nthey do not need to define/implement mspc-specific models and\ncan benefit from simpler function invocations."),(0,r.yg)("p",null,"However, each of these classes implement ",(0,r.yg)("strong",{parentName:"p"},"generic")," versions\nthat allow developers to define their own types, which makes\nit simpler to integrate MSPC into their application. For instance,\nif your peaks are represented in a different type (you use a different\nclass for your peaks), you can still use MSPC to analyze your peaks\nwithout having to convert them to a different type, if your objects\nimplement the same interface as MSPC requires."))}d.isMDXComponent=!0}}]);