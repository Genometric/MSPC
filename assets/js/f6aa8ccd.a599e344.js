"use strict";(self.webpackChunkmspc=self.webpackChunkmspc||[]).push([[895],{4961:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"library/asynch_exe","title":"(A)synchronous execution","description":"The MSPC Core offers synchronous and asynchronous analysis","source":"@site/docs/library/asynch_exe.md","sourceDirName":"library","slug":"/library/asynch_exe","permalink":"/MSPC/docs/library/asynch_exe","draft":false,"unlisted":false,"editUrl":"https://github.com/Genometric/MSPC/tree/dev/website/docs/library/asynch_exe.md","tags":[],"version":"current","frontMatter":{"title":"(A)synchronous execution"},"sidebar":"someSidebar","previous":{"title":"Basic Invocation","permalink":"/MSPC/docs/library/basic_invocation"}}');var c=s(4848),t=s(8453);const i={title:"(A)synchronous execution"},r=void 0,a={},l=[{value:"Synchronous Execution",id:"synchronous-execution",level:2},{value:"Asynchronous Execution",id:"asynchronous-execution",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.p,{children:["The MSPC ",(0,c.jsx)(n.code,{children:"Core"})," offers synchronous and asynchronous analysis\nof datasets. In other words:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"If executed synchronously, the caller is blocked until the\nanalysis has concluded;"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["If executed asynchronously, the caller is not blocked and can continue executing other logics, meanwhile, MSPC ",(0,c.jsx)(n.code,{children:"Core"})," reports\nthe execution status and signals when the analysis has concluded."]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.admonition,{type:"info",children:(0,c.jsxs)(n.p,{children:["Regardless of analysis invocation method, MSPC ",(0,c.jsx)(n.em,{children:"Core"}),"\nparallelizes the analysis of datasets (multi-threaded) whose\ndegree-of-parallelism can be adjusted."]})}),"\n",(0,c.jsx)(n.p,{children:"Both methods are discussed in details in the following sections."}),"\n",(0,c.jsx)(n.h2,{id:"synchronous-execution",children:"Synchronous Execution"}),"\n",(0,c.jsx)(n.p,{children:"A synchronous execution is the common function invocation, where\nthe command after function call is not executed until the called\nfunction returns. For instance:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:"var y = Func(x); // Blocked here until Func(x) returns\nvar z = y * 2;   // Not executed until Func(x) returns\n"})}),"\n",(0,c.jsxs)(n.p,{children:["The MSPC ",(0,c.jsx)(n.code,{children:"Core"})," can analyze datasets ",(0,c.jsx)(n.em,{children:"synchronously"}),", which\ncan be invoked as the following:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:"using Genometric.MSPC.Core;\n\n// Setup:\nvar mspc = new Mspc();\nforeach (var sample in samples) // where `samples` is a list of parsed input datasets.\n    mspc.AddSample(sample.FileHashKey, sample);\n\n// Method 1:\nvar results = mspc.Run(options);\n\n// Method 2:\nmspc.Run(options);\nvar results = mspc.GetResults();\n"})}),"\n",(0,c.jsxs)(n.p,{children:["A synchronous execution is easier to implement and invoke;\nhowever, it renders the program irresponsive during the function\nexecution, which can be disadvantageous for long-running\nanalysis. Therefore, MSPC ",(0,c.jsx)(n.code,{children:"Core"})," also implements ",(0,c.jsx)(n.em,{children:"asynchronous"}),"\nexecution of the analysis method."]}),"\n",(0,c.jsx)(n.h2,{id:"asynchronous-execution",children:"Asynchronous Execution"}),"\n",(0,c.jsx)(n.p,{children:"Long-running functions are commonly executed asynchronously,\nwhich keeps the (graphical or command line) interface responsive,\nand allows executing other logics (e.g., show elapsed time)\nwhile the long-running function is being executed. For instance:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:"int y = AsynchFunc(x); // function invoked and execution is \n                       // continued to the next line regardless \n                       // of the function has returned or not.\nvar z = y * 2;         // executed even if `AsynchFunc` is busy, \n                       // and uses default value of `y`, which is `0`. \n"})}),"\n",(0,c.jsxs)(n.p,{children:["The MSPC ",(0,c.jsx)(n.code,{children:"Core"})," can analyze datasets ",(0,c.jsx)(n.em,{children:"asynchronously"}),", which can\nbe used as the following in its basic form:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:"using Genometric.MSPC.Core;\n\n// Setup:\nvar mspc = new Mspc();\nforeach (var sample in samples) // where `samples` is a list of parsed input datasets.\n    mspc.AddSample(sample.FileHashKey, sample);\n\n\n// Invoke MSPC `Core` asynchronously\nmspc.RunAsync(options);\n// ...\n// Here implement any logic to be executed while MSPC Core is running\n// ...\n\n// Wait for MSPC's signal on analysis completion\nmspc.Done.WaitOne();\n\n// Get results\nvar results = mspc.GetResults();\n"})}),"\n",(0,c.jsxs)(n.p,{children:["While MSPC ",(0,c.jsx)(n.code,{children:"Core"})," is running asynchronously, it reports\nits progress, which you can display it as the following:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:'void Run()\n{\n    var mspc = new Mspc();\n    mspc.StatusChanged += _mspc_statusChanged;\n\n    mspc.RunAsync(_options);\n    mspc.Done.WaitOne();\n}\n\nprivate void _mspc_statusChanged(object sender, ValueEventArgs e)\n{\n    Console.WriteLine(e.Value.Step + "\\t" + e.Value.StepCount + "\\t" + e.Value.Message);\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["See ",(0,c.jsx)(n.a,{href:"https://github.com/Genometric/MSPC/blob/edce42ecb18e7c447396f038e03f2fd7d911d70e/CLI/Orchestrator.cs#L19-L73",children:"MSPC CLI Orchestrator"}),"\nfor a complete example of running MSPC ",(0,c.jsx)(n.code,{children:"Core"}),"\n",(0,c.jsx)(n.em,{children:"asynchronously"})," and reporting its status."]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>r});var o=s(6540);const c={},t=o.createContext(c);function i(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);